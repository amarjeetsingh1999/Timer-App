{"version":3,"sources":["Instructions.js","Timer.js","TimeInput.js","Button.js","Reset.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","id","this","props","instructions","Component","Timer","className","min","sec","TimeInput","type","max","disabled","enableMin","value","valueMin","onChange","handleChangeMin","enableSec","valueSec","handleChangeSec","Button","enable","onClick","handleButton","buttonText","Reset","handleReset","App","handleMinInput","event","setState","minInputValue","target","handleSecInput","secInputValue","state","isRunning","stopTimer","runTimer","playerTime","disableTimeInput","mountTimer","mountReset","window","clearInterval","interval","setInterval","startTime","m","Math","floor","s","round","timer","timerInput","disableButton","reset","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81535941.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Instructions extends Component {\r\n    render() {\r\n        return (\r\n            <p id=\"instructions\">{this.props.instructions}</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Instructions;","import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span className=\"time\">{this.props.min}</span>\r\n                <span>:</span>\r\n                <span className=\"time\">{this.props.sec}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\n\r\nclass TimeInput extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"timerInput\">\r\n                <input type=\"number\" min=\"0\" max=\"99\" disabled={this.props.enableMin} value={this.props.valueMin} onChange={this.props.handleChangeMin} />\r\n                <span>:</span>\r\n                <input type=\"number\" min=\"1\" max=\"59\" disabled={this.props.enableSec} value={this.props.valueSec} onChange={this.props.handleChangeSec} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TimeInput;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        return (\r\n            <button disabled={this.props.enable} onClick={this.props.handleButton}>{this.props.buttonText}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\nclass Reset extends Component {\r\n    render() {\r\n        return (\r\n            <button id=\"reset\" onClick={this.props.handleReset}>reset</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Reset;","import React, { Component } from 'react';\nimport Instructions from './Instructions';\nimport Timer from './Timer';\nimport TimeInput from './TimeInput';\nimport Button from './Button';\nimport Reset from './Reset';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      instructions: \"Set the timer below and press start to begin.\",\n      min: \"\",\n      sec: \"\",\n      minInputValue: 0,\n      secInputValue: 0,\n      disableTimeInput: false,\n      playerTime: \"\",\n      buttonText: \"start\",\n      mountTimer: false,\n      isRunning: false,\n      mountReset: false,\n    };\n  }\n\n  handleMinInput = (event) => {\n    this.setState({\n      minInputValue: event.target.value\n    });\n  }\n\n  handleSecInput = (event) => {\n    this.setState({\n      secInputValue: event.target.value\n    });\n  }\n\n  handleButton = (event) => {\n    if (!this.state.isRunning && (this.state.buttonText === \"start\")) {\n      const playerTime = (+this.state.minInputValue * 60) + (+this.state.secInputValue);\n      this.setState({\n        instructions: \"Pause or reset the timer at any time.\",\n        disableTimeInput: true,\n        playerTime: playerTime,\n        buttonText: \"pause\",\n        mountTimer: true,\n        isRunning: true,\n        mountReset: true,\n      });\n\n      if (this.state.minInputValue < 10) {\n        this.setState({\n          min: \"0\" + this.state.minInputValue\n        });\n      } else {\n        this.setState({\n          min: this.state.minInputValue\n        });\n      }\n\n      if (this.state.secInputValue < 10) {\n        this.setState({\n          sec: \"0\" + this.state.secInputValue\n        });\n      } else {\n        this.setState({\n          sec: this.state.secInputValue\n        });\n      }\n\n      this.runTimer();\n    } else if (this.state.isRunning && (this.state.buttonText === \"pause\")) {\n      this.stopTimer();\n      this.setState({\n        instructions: \"Timer paused, press resume to continue.\",\n        isRunning: false,\n        buttonText: \"resume\"\n      });\n    } else if (!this.state.isRunning && (this.state.buttonText === \"resume\")) {\n      this.runTimer();\n      this.setState({\n        instructions: \"Pause or reset the timer at any time.\",\n        isRunning: true,\n        buttonText: \"pause\"\n      });\n    } else if (this.state.isRunning && (this.state.buttonText === \"new timer\")) {\n      this.handleReset();\n      // this.setState({\n      //   instructions: \"Set the timer below and press start to begin.\",\n      //   isRunning: false,\n      //   buttonText: \"start\",\n      //   disableTimeInput: false,\n      //   mountTimer: false,\n      // });\n    }\n  }\n\n  handleReset = () => {\n    window.clearInterval(this.interval);\n    this.setState({\n      instructions: \"Set the timer below and press start to begin.\",\n      min: \"\",\n      sec: \"\",\n      minInputValue: 0,\n      secInputValue: 0,\n      disableTimeInput: false,\n      playerTime: \"\",\n      buttonText: \"start\",\n      mountTimer: false,\n      isRunning: false,\n      mountReset: false,\n    });\n  }\n\n  runTimer = () => {\n    this.interval = setInterval(() => {\n      this.setState({\n        playerTime: this.state.playerTime -= 1\n      });\n      let startTime = this.state.playerTime / 60;\n      let m = Math.floor(startTime);\n      let min;\n      if (m < 10) {\n        min = \"0\" + m;\n      } else {\n        min = m;\n      }\n      let s = Math.round((startTime - m) * 60);\n      let sec;\n      if (s < 10) {\n        sec = \"0\" + s;\n      } else {\n        sec = s;\n      }\n      if (this.state.playerTime < 1) {\n        window.clearInterval(this.interval);\n        this.setState({\n          instructions: \"Time's up! You did good!\",\n          buttonText: \"new timer\",\n          mountReset: false\n        });\n      }\n      this.setState({\n        min: min,\n        sec: sec,\n        isRunning: true\n      });\n    }, 1000);\n  }\n\n  stopTimer = () => {\n    window.clearInterval(this.interval);\n  }\n\n  render() {\n    let timer;\n    if (this.state.mountTimer) {\n      timer = <Timer min={this.state.min} sec={this.state.sec} />;\n    } else {\n      timer = \"\";\n    }\n\n    let timerInput;\n    if (!this.state.disableTimeInput) {\n      timerInput = <TimeInput valueMin={this.state.minInputValue} handleChangeMin={this.handleMinInput} valueSec={this.state.secInputValue} handleChangeSec={this.handleSecInput} />;\n    } else {\n      timerInput = \"\";\n    }\n\n    let disableButton;\n    if (this.state.minInputValue > 0 || this.state.secInputValue > 0) {\n      disableButton = false;\n    } else {\n      disableButton = true;\n    }\n\n    let reset;\n    if (this.state.mountReset) {\n      reset = <Reset handleReset={this.handleReset} />;\n    } else {\n      reset = \"\";\n    }\n\n    return (\n      <div id=\"timerBody\">\n        <h1>Timer App</h1>\n        <Instructions instructions={this.state.instructions} />\n        <div id=\"timer\">\n          {timer}\n          {timerInput}\n        </div>\n        <div id=\"buttonContainer\">\n          <Button buttonText={this.state.buttonText} handleButton={this.handleButton} enable={disableButton} />\n          {reset}\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}